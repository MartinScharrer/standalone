%
% \iffalse
%<!COPYRIGHT>
% \fi
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsection{The Package File}
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{standalone}[%
%<!DATE>
%<!VERSION>
%<*DRIVER>
    2099/01/01 develop
%</DRIVER>
    Package to include TeX sub-files with preambles]
%    \end{macrocode}
%
% The package file is to be loaded by a main document which includes \cls{standalone} sub-files.
% It is also loaded by the \cls{standalone} class to share code. The class then redefines certain macros.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{If-Switches}
%
% \begin{macro}{\ifstandalone}
% Declare |standalone| if-switch and set it to false. The class will set it to true.
% The |\csname| trickery is used to avoid issues if the switch was already defined.
%    \begin{macrocode}
\@ifundefined{ifstandalone}{%
    \expandafter\newif\csname ifstandalone\endcsname
    \standalonefalse
}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ifstandalonebeamer}
% \changes{v0.2}{2010/03/23}{New macro}
% Make sure that |standalonebeamer| if-switch is defined and set it to false.
% If the class was loaded beforehand with the |beamer| option it is already defined as true.
% The |\csname| trickery is used to avoid issues if the switch was already defined.
%    \begin{macrocode}
\@ifundefined{ifstandalonebeamer}{%
    \expandafter\newif\csname ifstandalonebeamer\endcsname
    \standalonebeamerfalse
}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\onlyifstandalone}
% \changes{v0.3}{2010/03/26}{New macro}
% Macro version of |\ifstandalone|. The |{ }| around the argument protects the content from the package etc. scanners.
% Only defined if not already defined by the class, in the case of a |standalone| file included other |standalone| files.
%    \begin{macrocode}
\@ifundefined{onlyifstandalone}{%
    \let\onlyifstandalone\@gobble
}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\IfStandalone}[2]{true clause}{false clause}
% Macro version of |\ifstandalone .. \else .. \fi|. The |{ }| around the argument protects the content from the package etc. scanners.
%    \begin{macrocode}
\@ifundefined{IfStandalone}{%
    \let\IfStandalone\@secondoftwo
}{}
%    \end{macrocode}
% \end{macro}
%
% Define if-switches for TeX formats.
% This loads the corresponding packages if available, but falls back to some own code if they are not installed.
%    \begin{macrocode}
\expandafter\ifx\csname ifluatex\endcsname\relax
    \IfFileExists{ifluatex.sty}{
        \RequirePackage{ifluatex}
    }{
        \begingroup
        \expandafter\ifx\csname directlua\endcsname\relax
            \endgroup
            \global\expandafter\let\csname ifluatex\expandafter\endcsname\csname iffalse\endcsname
        \else
            \endgroup
            \global\expandafter\let\csname ifluatex\expandafter\endcsname\csname iftrue\endcsname
        \fi
    }
\fi
\expandafter\ifx\csname ifpdf\endcsname\relax
    \IfFileExists{ifpdf.sty}{
        \RequirePackage{ifpdf}
    }{
        \begingroup
        \expandafter\ifx\csname pdfoutput\endcsname\relax
            \endgroup
            \global\expandafter\let\csname ifpdf\expandafter\endcsname\csname iffalse\endcsname
        \else
            \endgroup
            \ifnum\pdfoutput<1
                \global\expandafter\let\csname ifpdf\expandafter\endcsname\csname iffalse\endcsname
            \else
                \global\expandafter\let\csname ifpdf\expandafter\endcsname\csname iftrue\endcsname
            \fi
        \fi
    }
\fi
\expandafter\ifx\csname ifxetex\endcsname\relax
    \IfFileExists{ifxetex.sty}{
        \RequirePackage{ifxetex}
    }{
        \begingroup
        \expandafter\ifx\csname XeTeXrevision\endcsname\relax
            \endgroup
            \global\expandafter\let\csname ifxetex\expandafter\endcsname\csname iffalse\endcsname
        \else
            \endgroup
            \global\expandafter\let\csname ifxetex\expandafter\endcsname\csname iftrue\endcsname
        \fi
    }
\fi
%    \end{macrocode}
%
%
% \begin{macro}{\ifsa@subpreambles}
% \begin{macro}{\ifsa@sortsubpreambles}
% \begin{macro}{\ifsa@printsubpreambles}
% \begin{macro}{\ifsa@group}
% \begin{macro}{\ifsa@obeyclassoptions}
% \begin{macro}{\ifsa@comments}
% The if-switches for the options.
%    \begin{macrocode}
\newif\ifsa@subpreambles
\newif\ifsa@sortsubpreambles
\newif\ifsa@printsubpreambles
\newif\ifsa@group
\newif\ifsa@obeyclassoptions
\newif\ifsa@multi
\newif\ifsa@tikz
\newif\ifsa@varwidth
\newif\ifsa@comments
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Options}
%    \begin{macrocode}
\RequirePackage{xkeyval}
%    \end{macrocode}
%
% \begin{macro}{\sa@pkgoption}
% Wrapper macro to define options.
%    \begin{macrocode}
\def\sa@pkgoption{%
    \define@key{standalone.sty}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sa@boolean}[2]{name of if-switch}{`true' or `false'}
% Sets if-switches.
%    \begin{macrocode}
\def\sa@boolean#1#2{%
    \sa@boolorvalue{#1}{#2}%
        {\ClassError{standalone}{Invalid value '#2' for boolean key '#1'}{}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sa@boolorvalue}[2]{name of if-switch}{`true', `false' or a value}{code to be executed if it is a value.}
% Sets if-switches.
%    \begin{macrocode}
\def\sa@boolorvalue#1#2{%
    \begingroup
    \edef\@tempa{#2}%
    \def\@tempb{true}%
    \ifx\@tempa\@tempb
        \endgroup
        \csname sa@#1true\endcsname
        \expandafter\@gobble
    \else
    \def\@tempb{false}%
    \ifx\@tempa\@tempb
        \endgroup
        \csname sa@#1false\endcsname
        \expandafter\expandafter
        \expandafter\@gobble
    \else
        \endgroup
        \expandafter\expandafter
        \expandafter\@firstofone
    \fi\fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{key}{standalone.sty}{sort}
%    \begin{macrocode}
\sa@pkgoption{sort}[true]{%
    \sa@boolean{sortsubpreambles}{#1}%
    \ifsa@sortsubpreambles
        \sa@subpreamblestrue
    \fi
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty}{print}
%    \begin{macrocode}
\sa@pkgoption{print}[true]{%
    \sa@boolean{printsubpreambles}{#1}%
    \ifsa@printsubpreambles
        \sa@subpreamblestrue
    \fi
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty}{subpreambles}
%    \begin{macrocode}
\sa@pkgoption{subpreambles}[true]{%
    \sa@boolean{subpreambles}{#1}%
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty}{group}
%    \begin{macrocode}
\sa@pkgoption{group}[true]{%
    \sa@boolean{group}{#1}%
}
\sa@grouptrue
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty}{comments}
%    \begin{macrocode}
\sa@pkgoption{comments}[true]{%
    \sa@boolean{comments}{#1}%
    \ifsa@comments
        \def\sa@percent{\@makeother\%}%
    \else
        \def\sa@percent{\catcode`\%=14\relax}%
    \fi
}
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty}{nocomments}
%    \begin{macrocode}
\sa@pkgoption{nocomments}[]{%
    \begingroup
        \def\@tempa{#1}%
        \ifx\@tempa\@empty\else
            \PackageWarning{standalone}{Unwanted value of 'nocomments' was ignored}{}A
        \fi
    \endgroup
    \setkeys{standalone.sty}{comments=false}%
}
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty}{mode}
%    \begin{macrocode}
\sa@pkgoption{mode}{%
    \begingroup
    \expandafter\let\expandafter\@tempa\csname sa@mode@#1\endcsname
    \ifx\@tempa\relax
        \endgroup
        \PackageError{standalone}{Wrong value for option 'mode'}{}%
    \else
        \expandafter
        \endgroup
        \@tempa
    \fi
}
\def\sa@mode@none{%
    \let\sa@mode\relax%
}
\def\sa@mode@tex{%
    \def\sa@mode{1}%
}
\def\sa@mode@image{%
    \def\sa@mode{2}%
}
\@namedef{sa@mode@image|tex}{%
    \def\sa@mode{0}%
}
\def\sa@mode@build{%
    \def\sa@mode{3}%
}
\def\sa@mode@buildmissing{%
    \def\sa@mode{4}%
}
\def\sa@mode@buildnew{%
    \ifxetex
        \PackageWarning{standalone}{The 'mode=buildnew' option is not available for XeTeX.\MessageBreak
                                    Therefore 'mode=build' will be used instead}%
        \def\sa@mode{3}%
    \else
        \def\sa@mode{5}%
    \fi
}
\sa@mode@tex
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty}{obeyclassoptions}
%    \begin{macrocode}
\sa@pkgoption{obeyclassoptions}[true]{%
    \sa@boolean{obeyclassoptions}{#1}%
}
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty}{extension}
%    \begin{macrocode}
\sa@pkgoption{extension}{%
    \def\sa@graphicext{#1}%
}
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty}{build}
%    \begin{macrocode}
\sa@pkgoption{build}[]{%
    \setkeys{standalone.sty/build}{#1}%
}
%    \end{macrocode}
% \end{key}
%
% \begin{macro}{\sa@buildvar}[2]{name}{initial value}
% Wrapper to define \opt{build} variables.
%    \begin{macrocode}
\def\sa@buildvar#1#2{%
    \define@key{standalone.sty/build}{#1}{%
        \@namedef{sa@build@#1}{##1}%
    }%
    \@namedef{sa@build@#1}{#2}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{key}{standalone.sty/build}{jobname}
%    \begin{macrocode}
\sa@buildvar{jobname}{\file}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty/build}{latex}
%    \begin{macrocode}
\sa@buildvar{latex}{}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty/build}{quote}
%    \begin{macrocode}
\sa@buildvar{quote}{}
\let\sa@build@quote\relax
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty/build}{latexoptions}
%    \begin{macrocode}
\sa@buildvar{latexoptions}{%
    -interaction=batchmode -shell-escape -jobname \quote\buildjobname\quote
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty/build}{command}
%    \begin{macrocode}
\sa@buildvar{command}{%
    \latex\space\latexoptions\space\file
}
%%    '\string\PassOptionsToClass{border=0pt}{standalone}\string\input{\image}'
%    \end{macrocode}
% \end{key}
%
% Set default values depending on the used compiler.
%    \begin{macrocode}
\def\sa@build@postcommand{}
\ifpdf
    \def\sa@graphicext{.pdf}
    \ifluatex
        \def\sa@build@latex{lualatex}
    \else
        \def\sa@build@latex{pdflatex}
    \fi
\else
\ifxetex
    \def\sa@graphicext{.pdf}
    \def\sa@build@latex{xelatex}
\else
    \def\sa@graphicext{.eps}
    \def\sa@build@latex{latex}
    \def\sa@build@postcommand{dvips -o \quote\file.eps\quote\space \quote\file.dvi\quote}
\fi\fi
%    \end{macrocode}
%
%    \begin{macrocode}
\ProcessOptionsX*<standalone.sty>\relax
\disable@keys{standalone.sty}{subpreambles,print,sort}
%    \end{macrocode}
%
% Set correct quoting character for build option if none was set.
%    \begin{macrocode}
\def\sa@setquote{%
    \ifx\sa@build@quote\relax
    \expandafter\ifx\csname sa@convert@quote\endcsname\relax
    \begingroup
    \@tempswafalse
%    \end{macrocode}
% If \Macro\pdftexbanner is not defined (XeLaTeX) the distribution can not
% be determined and double quotes are set to ensure proper operation under MiKTeX.
%    \begin{macrocode}
    \expandafter\ifx\csname pdftexbanner\endcsname\relax
        \@tempswatrue
    \else
%    \end{macrocode}
% Test if there is a `|MiKTeX|' in \Macro\pdftexbanner.
%    \begin{macrocode}
    \def\MiKTeX{MiKTeX}
    \@onelevel@sanitize\MiKTeX
    \expandafter\def\expandafter\testmiktex\expandafter##\expandafter1\MiKTeX##2\relax{%
            \ifx\empty##2\empty
                \@tempswafalse
            \else
                \@tempswatrue
            \fi
    }
    \expandafter\expandafter
    \expandafter\testmiktex\expandafter\pdftexbanner\MiKTeX\relax\relax
    \fi
    \expandafter
    \endgroup
    \if@tempswa
    \def\sa@build@quote{"}
    \else
    \def\sa@build@quote{'}
    \fi
    \else
    \let\sa@build@quote\sa@convert@quote
    \fi
    \fi
}
%    \end{macrocode}
%
% In non-sorted print mode comments are preserved by default.
%    \begin{macrocode}
\ifsa@printsubpreambles
  \ifsa@sortsubpreambles\else
    \@ifundefined{sa@percent}{%
        \setkeys{standalone.sty}{comments=true}%
    }{}%
  \fi
\fi
%    \end{macrocode}
%
% \begin{macro}{\standaloneconfig}
%    \begin{macrocode}
\@ifclassloaded{standalone}{%
    \def\standaloneconfig{%
        \setkeys{standalone.sty,standalone.cls}%
    }%
}{%
    \newcommand*{\standaloneconfig}{%
        \setkeys{standalone.sty}%
    }%
}
%    \end{macrocode}
% \end{macro}
%
%
% The \pkg{currfile} package is used to get the file paths of the included sub-files.
%    \begin{macrocode}
\RequirePackage{currfile}
%    \end{macrocode}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Processing of Sub-Preambles}
%
%    \begin{macrocode}
\ifsa@subpreambles
%    \end{macrocode}
%
% \begin{macro}{\sa@out}
% Write handle.
%    \begin{macrocode}
\newwrite\sa@out
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@write}
% Helper macro for file output.
%    \begin{macrocode}
\def\sa@write{\immediate\write\sa@out}%
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\ifsa@printsubpreambles
%    \end{macrocode}
%
% \begin{macro}{\sa@removeonlyifstandalone}
% Scans for |\onlyifstandalone| and removes it argument.
%    \begin{macrocode}
\long\def\sa@removeonlyifstandalone#1\onlyifstandalone{%
  \g@addto@macro\sa@preamble{#1}%
  \@ifnextchar\sa@endmarker
    {\@gobble}%
    {\expandafter\sa@gobbleeol\expandafter\sa@removeonlyifstandalone\expandafter^^J\@gobble}%
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\fi
%    \end{macrocode}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Sorting of package options}
%
% Macros only needed for this mode are defined inside the |\if...|
% to save memory otherwise.
%
%    \begin{macrocode}
\ifsa@sortsubpreambles
%    \end{macrocode}
%
% \begin{macro}{\sa@usepackagewithoutoptions}
% Simply calls the original |\usepackage| while skipping the optional
% argument with potential package options.
%    \begin{macrocode}
\newcommand{\sa@usepackagewithoutoptions}[2][]{%
  \sa@orig@usepackage{#2}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@endmarker}
% Unique end marker. Will not be expanded.
%    \begin{macrocode}
\def\sa@endmarker{%
  \@gobble{sa@endmarker}%
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ifsa@printsubpreambles
%    \end{macrocode}
%
%
% In sorted print mode all collected package etc. information is printed into the output file, followed
% by the reduced sub-preambles.
%    \begin{macrocode}
\AtEndDocument{%
  \sa@write{\@percentchar\space Packages required by sub-files:}%
  \expandafter\@for\expandafter\pkg\expandafter:\expandafter=\sa@collpkgs\do{%
    \ifx\pkg\empty\else
      \sa@write{%
        \string\usepackage%
        \expandafter\ifx\csname sa@pkgopts@\pkg\endcsname\empty\else%
          [\csname sa@pkgopts@\pkg\endcsname]%
        \fi
        {\pkg}%
        \expandafter\ifx\csname sa@pkgdate@\pkg\endcsname\relax\else%
          [\csname sa@pkgdate@\pkg\endcsname]%
        \fi
        }%
    \fi
  }%
  \ifx\sa@collpgflibs\empty\else
  \sa@write{^^J\@percentchar\space PGF libraries required by sub-files:}%
  \expandafter\@for\expandafter\lib\expandafter:\expandafter=\sa@collpgflibs\do{%
    \ifx\lib\empty\else
      \sa@write{\string\usepgflibrary{\lib}}%
    \fi
  }%
  \fi
  \ifx\sa@colltikzlibs\empty\else
  \sa@write{^^J\@percentchar\space TikZ libraries required by sub-files:}%
  \expandafter\@for\expandafter\lib\expandafter:\expandafter=\sa@colltikzlibs\do{%
    \ifx\lib\empty\else
      \sa@write{\string\usetikzlibrary{\lib}}%
    \fi
  }%
  \fi
  \ifx\sa@colltikztiminglibs\empty\else
  \sa@write{^^J\@percentchar\space TikZ-Timing libraries required by sub-files:}%
  \expandafter\@for\expandafter\lib\expandafter:\expandafter=\sa@colltikztiminglibs\do{%
    \ifx\lib\empty\else
      \sa@write{%
        \string\usetikztiminglibrary%
        \expandafter\ifx\csname sa@tikztimingopts@\lib\endcsname\empty\else%
          [\csname sa@tikztimingopts@\lib\endcsname]%
        \fi
        {\lib}%
        \expandafter\ifx\csname sa@tikztimingdate@\lib\endcsname\relax\else%
          [\csname sa@tikztimingdate@\lib\endcsname]%
        \fi
        }%
    \fi
  }%
  \fi
  \sa@write{\expandafter\unexpanded\expandafter{\sa@preamble}}%
  \message{^^JPackage 'standalone' INFO: See file '\jobname.stp' for list of sub-preambles.^^J}%
  \immediate\closeout\sa@out
}
%    \end{macrocode}
%
% \begin{macro}{\sa@removepackages}
% Scans for |\usepackage|.
%    \begin{macrocode}
\long\def\sa@removepackages#1\usepackage{%
  \sa@removepgflibs#1\usepgflibrary\sa@endmarker
  \@ifnextchar\sa@endmarker
    {\@gobble}%
    {\sa@sortpackages}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@removepgflibs}
% Scans for |\usepgflibrary|.
%    \begin{macrocode}
\long\def\sa@removepgflibs#1\usepgflibrary{%
  \sa@removetikzlibs#1\usetikzlibrary\sa@endmarker
  \@ifnextchar\sa@endmarker
    {\@gobble}%
    {\sa@sortpgflibs}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@removetikzlibs}
% Scans for |\usetikzlibrary|.
%    \begin{macrocode}
\long\def\sa@removetikzlibs#1\usetikzlibrary{%
  \sa@removetikztiminglibs#1\usetikztiminglibrary\sa@endmarker
  \@ifnextchar\sa@endmarker
    {\@gobble}%
    {\sa@sorttikzlibs}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@removetikztiminglibs}
% Scans for |\usetikztiminglibrary|.
%    \begin{macrocode}
\long\def\sa@removetikztiminglibs#1\usetikztiminglibrary{%
  \sa@removeonlyifstandalone#1\onlyifstandalone\sa@endmarker
  \@ifnextchar\sa@endmarker
    {\@gobble}%
    {\sa@sorttikztiminglibs}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@sortpackage}
% Reads \cs{usepackage} arguments and stores them away. A list of all packages is compiled. Every package is only
% added once and has also a list of options used, also only saved once.
% If package dates are requested then the highest one is stored. Trailing newlines are removed.
%    \begin{macrocode}
\def\sa@collpkgs{}%
\newcommand\sa@sortpackages[2][]{%
  \@ifnextchar[%]
    {\sa@@sortpackages{#1}{#2}}%
    {\sa@@sortpackages{#1}{#2}[]}%
}
\def\sa@@sortpackages#1#2[#3]{%
  \@for\pkg:=#2\do {%
    \@ifundefined{sa@pkgopts@\pkg}%
      {%
        \expandafter\g@addto@macro\expandafter\sa@collpkgs\expandafter{\expandafter,\pkg}%
        \global\@namedef{sa@pkgopts@\pkg}{#1}%
        \global\@namedef{sa@pkgopt@\pkg @}{}%
        \ifx\relax#1\relax\else
          \@for\opt:=#1\do{\global\@namedef{sa@pkgopt@\pkg @\opt}{}}%
        \fi
      }%
      {%
        \ifx\relax#1\relax\else
          \@for\opt:=#1\do{%
            \@ifundefined{sa@pkgopt@\pkg @\opt}%
              {%
                \expandafter\g@addto@macro\csname sa@pkgopts@\pkg\expandafter\endcsname\expandafter{\expandafter,\opt}%
                \global\@namedef{sa@pkgopt@\pkg @\opt}{}%
              }{}%
          }%
        \fi
      }%
    \ifx\relax#3\relax\else
    \@ifundefined{sa@pkgdate@\pkg}%
      {\global\@namedef{sa@pkgdate@\pkg}{#3}}%
      {%
        \ifnum\expandafter\expandafter
         \expandafter\sa@@getdate\csname sa@pkgdate@\pkg\endcsname//00\relax<\sa@@getdate#3//00\relax
          \global\@namedef{sa@pkgdate@\pkg}{#3}%
        \fi
      }%
    \fi
  }%
  \sa@gobbleeol\sa@removepackages^^J%
}
\def\sa@@getdate#1/#2/#3#4#5\relax{#1#2#3#4}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@sortpgflibs}
% Reads the \cs{usepgflibrary} argument and stores it away.
% Trailing newlines are removed.
%    \begin{macrocode}
\def\sa@collpgflibs{}%
\def\sa@sortpgflibs#1{%
  \@for\lib:=#1\do {%
    \@ifundefined{sa@pgflib@\lib}%
      {%
        \expandafter\g@addto@macro\expandafter\sa@collpgflibs\expandafter{\expandafter,\lib}%
        \global\@namedef{sa@pgflib@\lib}{}%
      }%
      {}%
  }%
  \sa@gobbleeol\sa@removepgflibs^^J%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@sorttikzlibs}
% Reads the \cs{usetikzlibrary} argument and stores it away.
% Trailing newlines are removed.
%    \begin{macrocode}
\def\sa@colltikzlibs{}%
\def\sa@sorttikzlibs#1{%
  \@for\lib:=#1\do {%
    \@ifundefined{sa@tikzlib@\lib}%
      {%
        \expandafter\g@addto@macro\expandafter\sa@colltikzlibs\expandafter{\expandafter,\lib}%
        \global\@namedef{sa@tikzlib@\lib}{}%
      }%
      {}%
  }%
  \sa@gobbleeol\sa@removetikzlibs^^J%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@sorttikztiminglibs}
% Reads \cs{usetikztiminglibrary} arguments and stores them away.
% Trailing newlines are removed.
%    \begin{macrocode}
\def\sa@colltikztiminglibs{}%
\newcommand\sa@sorttikztiminglibs[2][]{%
  \@ifnextchar[%]
    {\sa@@sorttikztiminglibs{#1}{#2}}%
    {\sa@@sorttikztiminglibs{#1}{#2}[]}%
}
\def\sa@@sorttikztiminglibs#1#2[#3]{%
  \@for\lib:=#2\do {%
    \@ifundefined{sa@tikztimingopts@\lib}%
      {%
        \expandafter\g@addto@macro\expandafter\sa@colltikztiminglibs\expandafter{\expandafter,\lib}%
        \global\@namedef{sa@tikztimingopts@\lib}{#1}%
        \global\@namedef{sa@tikztimingopt@\lib @}{}%
        \ifx\relax#1\relax\else
          \@for\opt:=#1\do{\global\@namedef{sa@tikztimingopt@\lib @\opt}{}}%
        \fi
      }%
      {%
        \ifx\relax#1\relax\else
          \@for\opt:=#1\do{%
            \@ifundefined{sa@tikztimingopt@\lib @\opt}%
              {%
                \expandafter\g@addto@macro\csname sa@tikztimingopts@\lib\expandafter\endcsname\expandafter{\expandafter,\opt}%
                \global\@namedef{sa@tikztimingopt@\lib @\opt}{}%
              }{}%
          }%
        \fi
      }%
    \ifx\relax#3\relax\else
    \@ifundefined{sa@tikztimingdate@\lib}%
      {\global\@namedef{sa@tikztimingdate@\lib}{#3}}%
      {%
        \begingroup
        \edef\@tempa{{\csname sa@tikztimingdate@\lib\endcsname}{#3}}%
        \expandafter\sa@getlargerdate\@tempa
        \expandafter\xdef\csname sa@tikztimingdate@\lib\endcsname{\sa@thedate}%
        \endgroup
      }%
    \fi
  }%
  \sa@gobbleeol\sa@removetikztiminglibs^^J%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sa@gobbleopt}
% Gobbles an optional argument and a potential line endings and then executes the command given by |#1|.
%    \begin{macrocode}
\def\sa@gobbleopt#1[#2]{%
  \@ifnextchar^^J%
    {\sa@gobbleeol{#1}}{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\else
%    \end{macrocode}
%
% \begin{macro}{\sa@scanpackages}
% Scans for |\usepackage|.
%    \begin{macrocode}
\def\sa@scanpackages#1\usepackage{%
  \@ifnextchar\sa@endmarker
    {\@gobble}%
    {\sa@collectpackage}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@collectpackage}
% Reads \cs{usepackage} arguments (ignores optional date) and stores it away.
% The options are later passed to the package to avoid option clashes.
%    \begin{macrocode}
\newcommand\sa@collectpackage[2][]{%
  \ifx\relax#1\relax\else
    \g@addto@macro\sa@collopts{\PassOptionsToPackage{#1}{#2}}%
  \fi
  \sa@scanpackages
}
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@collopts}
% Accumulator for collected options. Is executed and cleared at the end of this package.
%    \begin{macrocode}
\def\sa@collopts{}
\AtEndOfPackage{\sa@collopts\let\sa@collopts\relax}
%    \end{macrocode}
% \end{macro}
%
% End of |\ifsa@sortsubpreambles|.
%    \begin{macrocode}
\fi
%    \end{macrocode}
%
% \begin{environment}{standalonepreambles}
% This environment simply adds a group and sets the endline character to a printed newline and the argument character
% |#| as a normal character. The first suppresses |\par|'s in the stored sub-preambles while preserving newlines. The latter
% is required to permit macro arguments in the preambles. Otherwise a |#| is doubled to |##| causing compile errors when the
% sub-preambles are used.
% The |.sta| file is closed after this environment.
%    \begin{macrocode}
\def\standalonepreambles{%
  \begingroup
  \endlinechar=\m@ne
  \@makeother\#%
}
\def\endstandalonepreambles{%
  \endgroup
  \endinput
}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{subpreambles}
% This environment rereads the sub-preambles from the |.sta| files and stores it globally under the name
% ``\cs{prevsubpreamble@}\meta{file name}''. If sorting is enabled the sub-preambles are also scanned for
% loaded packages.
%    \begin{macrocode}
\long\gdef\subpreamble#1#2\endsubpreamble{%
  \expandafter\gdef\csname prevsubpreamble@#1\endcsname{#2}%
  \ifsa@sortsubpreambles
    \sa@scanpackages#2\usepackage\sa@endmarker
  \fi
}
\def\endsubpreamble{}%
%    \end{macrocode}
% \end{environment}
%
% If in |print| mode open the |.stp| file.
%    \begin{macrocode}
\ifsa@printsubpreambles
  \immediate\openout\sa@out=\jobname.stp\relax
\else
%    \end{macrocode}
% otherwise:
%
% Process |.sta| file from last run. All changes must be made by own macros which define the value globally.
% Therefore the input is wrapped in a group. Some spaces or special line endings could process typeset content,
% which causes errors inside the preamble. To be on the save side the input `content' is stored in a temp box.
%    \begin{macrocode}
\begingroup
  \setbox\@tempboxa\hbox{%
  \InputIfFileExists{\jobname.sta}{}{\PackageInfo{standalone}{STA file not found!}{}{}}%
  }%
\endgroup
%    \end{macrocode}

% \begin{macro}{\AtBeginDocument}
% At begin of the document the |.sta| file is read again. This time the sub-preamble macros are executed as normal.
% The |standalone| macros are defined to be without effect. If `sorting' is enabled \cs{usepackage} is temporarily
% redefined to ignore any given options, which where already passed (\cs{PassOptionsToPackage}) beforehand.
%    \begin{macrocode}
\AtBeginDocument{%
  \let\subpreamble\@gobble
  \let\endsubpreamble\relax
  \let\standalonepreambles\relax
  \let\endstandalonepreambles\relax
  \ifsa@sortsubpreambles
    \let\sa@orig@usepackage\usepackage
    \let\usepackage\sa@usepackagewithoutoptions
  \fi
  \InputIfFileExists{\jobname.sta}{}{}%
  \ifsa@sortsubpreambles
    \let\usepackage\sa@orig@usepackage
  \fi
  \immediate\openout\sa@out=\jobname.sta\relax
  \immediate\write\sa@out{\string\standalonepreambles}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\AtEndDocument}
% At end of the document write end macro to and close |.sta| file.
%    \begin{macrocode}
\AtEndDocument{%
  \sa@write{\string\endstandalonepreambles}%
  \immediate\closeout\sa@out
}
%    \end{macrocode}
% \end{macro}
%
% End of |\ifsa@printsubpreambles|.
%    \begin{macrocode}
\fi
%    \end{macrocode}
%
% End of |\ifsa@subpreambles|.
%    \begin{macrocode}
\fi
%    \end{macrocode}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Skipping of Sub-Preambles in Main Mode}
%
% This macros make the main document skip all preambles in sub-files.
%
% \begin{macro}{\sa@gobbleeol}
% Gobbles all following line endings (i.e.\ empty lines) and then executes the command given by |#1|.
% Because |\@ifnextchar| ignores spaces this also removes lines with only spaces.
%    \begin{macrocode}
\def\sa@gobbleeol#1^^J{%
  \@ifnextchar^^J%
    {\sa@gobbleeol{#1}}{#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@endinput}
% Ends the input file and discards all remaining material on the same line.
% To avoid issues with some user input like |%| after |\begin{document}| or
% a changed |\endlinechar| it is reset and any remaining text is discarded
% verbatim. This might also read the next line if the EOL of the current
% one got already commented out.
%    \begin{macrocode}
\def\sa@endinput{%
    \endlinechar`^^J\relax
    \let\do\@makeother
    \dospecials
    \sa@@endinput
}%
\def\sa@@endinput#1^^J{%
    \endgroup
    \endinput
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sa@substbox}
% The substitute for the content if skipped. Having no content at all can lead to errors caused by e.g.\ an outer
% \Macro\resizebox.
%    \begin{macrocode}
\def\sa@substbox{%
    \leavevmode\hbox to 1pt{\vbox to 1pt{}}%
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\standaloneignore}
% \changes{v0.3}{2010/03/26}{New macro}
% This macro must only be used in a sub-file before a |\documentclass|. It gobbles everything up to this macro
% and then executes the |standalone| definition of it shown further below.
% It should be written as |\csname standaloneignore\endcsname| to ignore errors in standalone mode.
% The second definition allows the user to also write |\csname standaloneignore \endcsname| (note the extra space)
% without errors.
%    \begin{macrocode}
\long\def\standaloneignore#1\documentclass{%
  \sa@documentclass
}
\@namedef{standaloneignore\space}{\standaloneignore}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@documentclass}
% The |standalone| definition of \cs{documentclass}. If the sub-preambles are to be processed then the
% starting content is written into the output file etc., but only for the first time this sub-file is included.
% Some input related settings are set-up (line endings, macro argument and comments).
% Finally \cs{sa@gobble} is called to process the preamble.
%    \begin{macrocode}
\newcommand{\sa@documentclass}[2][]{%
  \let\document\sa@document
  \let\sa@subfile@options\@empty
  \ifsa@obeyclassoptions
    \begingroup
    \edef\@tempa{#2}%
    \edef\@tempb{standalone}%
    \ifx\@tempa\@tempb
        \endgroup
        \def\sa@subfile@options{#1}%
    \else
        \endgroup
    \fi
  \fi
  \begingroup
  \ifsa@subpreambles
    \@ifundefined{sa@written@\currfilepath}%
      {%
        \ifsa@printsubpreambles
          \ifsa@sortsubpreambles
            \begingroup
              \edef\@tempa{^^J\@percentchar\space Preamble from file '\currfilepath'^^J}%
              \expandafter\g@addto@macro\expandafter\sa@preamble\expandafter{\@tempa}%
            \endgroup
          \else
            \sa@write{^^J\@percentchar\space Preamble from file '\currfilepath'}%
          \fi
        \else
          \sa@write{\string\subpreamble{\currfilepath}}%
        \fi
      }{}%
    \global\@namedef{subpreamble@\currfilepath}{}%
    \ifsa@printsubpreambles
      \endlinechar=`\^^J\relax
    \else
      \endlinechar=\m@ne
    \fi
    \@makeother\#%
    \@nameuse{sa@percent}%
  \fi
  \def\sa@gobbleto{document}%
  \sa@gobbleeol\sa@gobble^^J%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@gobble}
% Gobbles everything to the next |\begin|, then checks if it was a |\begin{document}|.
% If sub-preamble extraction is activated it accumulates the skipped content in macros
% named ``\cs{subpreamble@}\meta{file name}''. Every sub-file is remembered and its preamble is only saved once.
% In |print| mode the file body is ignored and a appropriate warning is printed,
% otherwise the current and previous sub-preamble of the current processed file are compared. If different the file body is also
% ignored to avoid errors due to possible newly required but not loaded packages. The user is warned again about this
% and is asked to rerun \LaTeX{}.
%    \begin{macrocode}
\def\sa@preamble{}%
\long\def\sa@gobble#1\begin#2{%
  \def\@tempa{#2}%
  \ifx\@tempa\sa@gobbleto
    \ifsa@subpreambles
      \expandafter\g@addto@macro\csname subpreamble@\currfilepath\endcsname{#1}%
      \@ifundefined{sa@written@\currfilepath}%
        {%
          \ifsa@printsubpreambles
            \ifsa@sortsubpreambles
              \sa@removepackages#1\usepackage\sa@endmarker
            \else
              \begingroup
              \let\sa@preamble\empty
              \sa@removeonlyifstandalone#1\onlyifstandalone\sa@endmarker
              \expandafter\sa@write\expandafter{\expandafter\unexpanded\expandafter{\sa@preamble}}%
              \endgroup
            \fi
          \else
            \sa@write{\unexpanded{#1}}%
            \sa@write{\string\endsubpreamble}%
          \fi
        }{}%
      \global\@namedef{sa@written@\currfilepath}{}%
      \ifsa@printsubpreambles
        \def\next{%
          \PackageWarning{standalone}{Running 'standalone' package in sub-preamble print mode. All body content of file `\currfilepath' is ignored!}{}{}%
          \sa@substbox
          \sa@endinput
        }%
      \else
      \expandafter
      \ifx
      \csname prevsubpreamble@\currfilepath\expandafter\endcsname
      \csname     subpreamble@\currfilepath\endcsname
        \def\next{\expandafter\endgroup\expandafter\begin\expandafter{\sa@gobbleto}}%
      \else
        %\expandafter\show\csname prevsubpreamble@\currfilepath\endcsname
        %\expandafter\show\csname     subpreamble@\currfilepath\endcsname
        \def\next{%
          \PackageWarning{standalone}{Sub-preamble of file '\currfilepath' has changed. Content will be ignored. Please rerun LaTeX!}{}{}%
          \immediate\write\@mainaux{%
            \@percentchar\space standalone package info: Rerun LaTeX!
          }%
          \sa@substbox
          \sa@endinput
        }%
      \fi
      \fi
    \else
      \def\next{\expandafter\endgroup\expandafter\begin\expandafter{\sa@gobbleto}}%
    \fi
  \else
    \ifsa@subpreambles
      \expandafter\g@addto@macro\csname subpreamble@\currfilepath\endcsname{#1\begin{#2}}%
      \@ifundefined{sa@written@\currfilepath}%
        {\sa@write{\unexpanded{#1\begin{#2}}}}{}%
    \fi
    \def\next{\sa@gobble}%
  \fi
  \next
}
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{standalone}
% Provide an empty definition of the |standalone| environment. The class is defining it with the code required in |standalone| mode.
%    \begin{macrocode}
\@ifundefined{standalone}
  {\newenvironment{standalone}[1][]{}{}}
  {}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{standalone}
% Provide an `empty' definition of the |standaloneframe| environment.
% It only gobbles all arguments: |<...>[<...>][...]{...}{...}|. Please note that the last two |{ }| arguments are also optional.
% The class is defining it with the code required in |standalone| mode.
%    \begin{macrocode}
\@ifundefined{standaloneframe}
  {\@ifundefined{beamer@newenv}
    {\newenvironment{standaloneframe}[1][]{%
      \@ifnextchar[%]
        {\sa@framegobbleopt}{\sa@framegobbleargs}}{}%
    }
    {\newenvironment<>{standaloneframe}[1][]{%
      \@ifnextchar[%]
        {\sa@framegobbleopt}{\sa@framegobbleargs}}{}%
    }
   \def\sa@framegobbleopt[#1]{\sa@framegobbleargs}
   \def\sa@framegobbleargs{%
     \@ifnextchar\bgroup
       {\sa@framegobbleargs@}%
       {}%
   }
   \def\sa@framegobbleargs@#1{%
    \@ifnextchar\bgroup
      {\@gobble}%
      {}%
   }
  }
  {}
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\sa@orig@document}
% \begin{macro}{\sa@orig@enddocument}
% Store original |document| environment.
%    \begin{macrocode}
\let\sa@orig@document\document
\let\sa@orig@enddocument\enddocument
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\document}
% Redefine the |\begin{document}| of the main file to redefine \cs{documentclass}.
% This can not be done using \cs{AtBeginDocument} because the original redefines
% \cs{documentclass} itself after executing the hook.
%    \begin{macrocode}
\begingroup
\toks@\expandafter{%
    \document
    \let\documentclass\sa@documentclass
    \ignorespaces
}
\xdef\document{\the\toks@}%
\endgroup
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\ifsa@obeyclassoptions
%    \end{macrocode}
%
%    \begin{macrocode}
\IfFileExists{varwidth.sty}{%
    \RequirePackage{varwidth}%
}{}
%    \end{macrocode}
%
% \begin{key}{standalone.sty/class}{12pt}
%    \begin{macrocode}
\define@key{standalone.sty/class}{12pt}[]{%
    \def\sa@subfile@size{12}%
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty/class}{11pt}
%    \begin{macrocode}
\define@key{standalone.sty/class}{11pt}[]{%
    \def\sa@subfile@size{11}%
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty/class}{10pt}
%    \begin{macrocode}
\define@key{standalone.sty/class}{10pt}[]{%
    \def\sa@subfile@size{10}%
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{key}{standalone.sty/class}{class}
%    \begin{macrocode}
\define@key{standalone.sty/class}{class}{%
    \def\sa@subfile@class{#1}%
}
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty/class}{multi}
%    \begin{macrocode}
\define@key{standalone.sty/class}{multi}[true]{%
    \sa@boolorvalue{multi}{#1}{%
        \sa@multitrue\AtEndOfClass{\standaloneenv{#1}}%
    }%
    \ifsa@multi
        \def\sa@requestedpage{1}%
        \def\standaloneenv##1{%
            \begingroup
            \edef\@tempa{\endgroup\noexpand\@for\noexpand\@tempa:=\zap@space##1 \@empty}%
            \@tempa\do{\expandafter\@standaloneenv\expandafter{\@tempa}}%
        }%
        \def\@standaloneenv##1{%
            \expandafter\ifx\csname sa@orig@##1\endcsname\relax
                \expandafter\let\csname sa@orig@##1\expandafter\endcsname\csname ##1\endcsname
                \expandafter\let\csname sa@orig@end##1\expandafter\endcsname\csname end##1\endcsname
            \fi
            \expandafter\def\csname ##1\endcsname{%
                \ifnum\sa@internal=0
                    \global\advance\sa@pagenum\@ne
                    \sa@boxit
                \fi
                \advance\sa@internal\@ne
                \csname sa@orig@##1\endcsname
            }%
            \expandafter\def\csname end##1\endcsname{%
                \csname sa@orig@end##1\endcsname
                \advance\sa@internal\m@ne
                \ifnum\sa@internal=0
                    \endsa@boxit
                    \ifx\sa@requestedpage\sa@allpages
                        \usebox\sa@box
                    \else
                    \ifnum\sa@requestedpage=\sa@pagenum
                        \usebox\sa@box
                    \fi\fi
                \fi
                \@ignoretrue
            }%
        }%
    \else
        \let\standaloneenv\@gobble
    \fi
}
\newcount\sa@internal
\newcount\sa@pagenum
\def\sa@allpages{-1}%
\let\sa@box\@tempboxa
%    \end{macrocode}
% \end{key}
%
%
% \begin{macro}{\sa@boxit}
%    \begin{macrocode}
\def\sa@boxit{%
    \setbox\sa@box\hbox\bgroup\color@setgroup\sa@varwidth
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endsa@boxit}
%    \begin{macrocode}
\def\endsa@boxit{%
    \sa@endvarwidth\color@endgroup\egroup
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{key}{standalone.sty/class}{tikz}
%    \begin{macrocode}
\define@key{standalone.sty/class}{tikz}[true]{%
    \sa@boolean{tikz}{#1}%
    \ifsa@tikz
        \setkeys*{standalone.sty/class}{multi=tikzpicture,varwidth=false}%
    \fi
}
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty/class}{varwidth}
%    \begin{macrocode}
\define@key{standalone.sty/class}{varwidth}[true]{%
    \sa@boolorvalue{varwidth}{#1}{\sa@varwidthtrue\def\sa@width{#1}}%
    \ifsa@varwidth
        \expandafter\ifx\csname ver@varwidth.sty\endcsname\relax
            \PackageWarning{standalone}{A standalone file which uses the varwidth package\MessageBreak
                                        has been encountered while obeyclassoptions=true.\MessageBreak
                                        Please load this package in the preamble.\MessageBreak
                                        The file in question is loaded}%
            \sa@varwidthfalse
        \fi
    \fi
    \ifsa@varwidth
        \def\sa@varwidth{\varwidth{\sa@width}}%
        \def\sa@endvarwidth{\endvarwidth}%
    \else
        \let\sa@varwidth\@empty
        \let\sa@endvarwidth\@empty
    \fi
}
\let\sa@varwidth\@empty
\let\sa@endvarwidth\@empty
\def\sa@width{\linewidth}
%    \end{macrocode}
% \end{key}
%
%
%
%
% \begin{key}{standalone.sty/class}{beamer}
% The if-switch is always set the `|false|' aftwards, because we are not in standalone mode.
%    \begin{macrocode}
\define@key{standalone.sty/class}{beamer}[true]{%
    \sa@boolean{beamer}{#1}%
    \ifstandalonebeamer
        \setkeys*{standalone.sty/class}{class=beamer,preview=false,crop=false,varwidth=false}%
    \fi
    \standalonebeamerfalse
}
\let\sa@beamertrue\standalonebeamertrue
\let\sa@beamerfalse\standalonebeamerfalse
%    \end{macrocode}
% \end{key}
%
% \begin{key}{standalone.sty/class}{border}
%    \begin{macrocode}
\define@key{standalone.sty/class}{border}{%
    \sa@readborder#1 {} {} {} {} \@nnil
}
%    \end{macrocode}
% \end{key}
%
%
% \begin{macro}{\sa@border@left}
% \begin{macro}{\sa@border@right}
% \begin{macro}{\sa@border@top}
% \begin{macro}{\sa@border@margin}
%    \begin{macrocode}
\def\sa@border@left{0.50001bp}
\let\sa@border@right\sa@border@left
\let\sa@border@top\sa@border@left
\let\sa@border@bottom\sa@border@left
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\rem@bp}
%    \begin{macrocode}
\def\rem@bp#1bp\relax#2\@nnil{#1}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\default@bp}
%    \begin{macrocode}
\def\default@bp#1#2{%
    \begingroup
    \afterassignment\remove@to@nnil
    \dimen@ #2bp\relax\@nnil
    \expandafter
    \endgroup
    \expandafter
    \def\expandafter#1\expandafter{\the\dimen@}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sa@readborder}
%    \begin{macrocode}
\def\sa@readborder#1 #2 #3 #4 #5\@nnil{%
    \ifx\\#2#3#4\\%
        \default@bp\sa@border@left{#1}%
        \let\sa@border@right\sa@border@left
        \let\sa@border@top\sa@border@left
        \let\sa@border@bottom\sa@border@left
    \else
    \ifx\\#4\\%
        \default@bp\sa@border@left{#1}%
        \let\sa@border@right\sa@border@left
        \default@bp\sa@border@top{#2}%
        \let\sa@border@bottom\sa@border@top
    \else
        \default@bp\sa@border@left{#1}%
        \default@bp\sa@border@bottom{#2}%
        \default@bp\sa@border@right{#3}%
        \default@bp\sa@border@top{#4}%
    \fi\fi
}%
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\IfFileExists{adjustbox.sty}{%
    \IfFileExists{trimclip.sty}{%
        \RequirePackage{trimclip}%
    }{%
        \RequirePackage{adjustbox}%
    }%
    \def\sa@beginbox{%
        \ifcase0%
            \ifdim\sa@border@left<\z@ 1\fi
            \ifdim\sa@border@right<\z@ 1\fi
            \ifdim\sa@border@top<\z@ 1\fi
            \ifdim\sa@border@bottom<\z@ 1\fi
        \relax
            \marginbox{{\sa@border@left} {\sa@border@bottom} {\sa@border@right} {\sa@border@top}}\bgroup
        \else
            \clipbox{{-\sa@border@left} {-\sa@border@bottom} {-\sa@border@right} {-\sa@border@top}}\bgroup
        \fi
    }%
    \let\sa@endbox\egroup
}{%
    \PackageInfo{standalone}{The 'adjustbox' bundle was not found. Negative borders will not be clipped.}%
    \def\sa@beginbox{%
        \setbox\@tempboxa\color@hbox
    }%
    \def\sa@endbox{%
        \color@endbox
        \sbox\@tempboxa{%
            \setlength\@tempdima{\sa@border@left}%
            \hskip\@tempdima
            \setlength\@tempdima{\sa@border@right}%
            \setlength\@tempdimb{\sa@border@bottom}%
            \setlength\@tempdimc{\sa@border@top}%
            \advance\@tempdima\wd\@tempboxa
            \wd\@tempboxa\@tempdima
            \advance\@tempdimb\dp\@tempboxa
            \dp\@tempboxa\@tempdimb
            \advance\@tempdimc\ht\@tempboxa
            \ht\@tempboxa\@tempdimc
            \raise\dp\@tempboxa\box\@tempboxa
        }%
        \usebox\@tempboxa
    }%
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\fi
%    \end{macrocode}
%
%
% \begin{macro}{\sa@document}
% This is the |\begin{document}| of the sub files. It does nothing except of
% redefining |\end{document}| and calling our own |atbegindocument| hook.
%    \begin{macrocode}
\def\sa@document{%
    \ifsa@group
        \let\enddocument\sa@enddocument
        \ifx\sa@subfile@options\@empty\else
% Process class options
            \def\sa@subfile@size{10}%
            \def\sa@subfile@class{article}%
            \let\NeedsTeXFormat\@gobble
            \let\sa@atendofclass\@empty
            \def\AtEndOfClass{\g@addto@macro\sa@atendofclass}%
            \def\standaloneconfig{\setkeys*{standalone.sty/class}}%
            \let\sa@@latex@error\@latex@error
            \let\@latex@error\@gobbletwo
            \let\sa@selectfont\selectfont
            \let\selectfont\relax
            \makeatletter
            \nullfont
            \InputIfFileExists{standalone.cfg}{}{}%
            \begingroup
            \def\@tempa{\setkeys*{standalone.sty/class}}%
            \expandafter\expandafter
            \expandafter\endgroup
            \expandafter\@tempa\expandafter{\sa@subfile@options}%
            \sa@atendofclass
            \ifpdf
                \ifx\GPT@page\@empty\else
                    \let\sa@requestedpage\GPT@page
                \fi
            \else
            \ifxetex
                \ifx\Gin@XeTeX@page\@empty\else
                    \let\sa@requestedpage\Gin@XeTeX@page
                \fi
            \fi\fi
            \sa@pagenum\z@
            \sa@beginbox
% Determinate required size files (normal classes or KOMA Script).
% If the main file does not use a KOMA class itself, the KOMA size files
% can't be used.
            \@ifundefined{KOMAClassName}{%
                \def\@tempa{size}%
            }{%
                \def\@tempa##1##2##3##4\relax{\def\@tempa{##1##2##3}}%
                \expandafter\@tempa\sa@subfile@class{}{}{}\relax
                \def\@tempb{scr}%
                \ifx\@tempa\@tempb
                    \def\@tempa##1{scrsize##1pt}%
                \else
                    \def\@tempa{size}%
                \fi
            }%
% Load size file. Redefine macros to avoid errors and spaces be introduced.
            \let\sa@newcommand\newcommand
            \let\sa@@ifundefined\@ifundefined
            \let\newcommand\renewcommand
            \let\@ifundefined\@thirdofthree
            \edef\@tempa{%
                \noexpand\input{\@tempa\sa@subfile@size.clo}%
                \catcode`\noexpand\@=\the\catcode`\@
            }\@tempa
            \let\newcommand\sa@newcommand
            \let\@latex@error\sa@@latex@error
            \let\@ifundefined\sa@@ifundefined
            \let\selectfont\sa@selectfont
            \normalsize
        \fi
    \else
        \endgroup
        \global\let\enddocument\sa@enddocument
    \fi
    \sa@atbegindocument
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@enddocument}
% This is the |\end{document}| of the sub files. It does nothing except of
% calling our own |atenddocument| hook and then the `after end document' handler.
% Also spaces after the environment are ignored. Otherwise a following line break
% will cause a space even if |\endinput| follows directly.
%    \begin{macrocode}
\def\sa@enddocument{%
    \sa@atenddocument
    \ifsa@group
        \ifx\sa@subfile@options\@empty\else
            \sa@endbox
        \fi
    \else
        \global\let\document\sa@orig@document
        \global\let\enddocument\sa@orig@enddocument
        \begingroup
        \def\@currenvir{document}%
    \fi
    \@ignoretrue
    \aftergroup\endinput
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sa@@enddocument}
% This is a `after end document' handler for the sub-files. It restores macros and
% ends the input of the file.
%    \begin{macrocode}
%\def\sa@@enddocument{%
%  %\let\document\sa@orig@document
%  \let\enddocument\sa@orig@enddocument
%  \endinput
%}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@atbegindocument}
% This hook simply ignores all spaces after |\begin{document}| in the sub files.
%    \begin{macrocode}
\def\sa@atbegindocument{%
  \ignorespaces
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sa@atenddocument}
% This hook simply ignores the last skip (normally the spaces) before |\end{document}| in the sub files.
%    \begin{macrocode}
\def\sa@atenddocument{%
  \ifhmode\unskip\fi
}%
%    \end{macrocode}
% \end{macro}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Include Standalone}
%
% \begin{macro}{\includestandalone}
%    \begin{macrocode}
\IfFileExists{gincltex.sty}{%
    \RequirePackage{gincltex}
    \newcommand*\includestandalone[2][]{%
        \begingroup
        \setkeys*{standalone.sty}{##1}%
        \edef\@tempa{{##2\sa@graphicext}}%
        \expandafter\expandafter\expandafter\includestandalone@
        \expandafter\expandafter\expandafter{\expandafter\XKV@rm\expandafter}\@tempa{##2}%
        \endgroup
    }
}{%
    \begingroup
    \let\on@line\@gobble
    \PackageWarning{standalone}{Required package 'gincltex' not found.\MessageBreak
                                The \string\includestandalone\space feature is disabled.}
    \endgroup
    \newcommand*\includestandalone[2][]{%
        \begingroup
        \input{##2}%
        \endgroup
    }
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ifxetex\else
    \RequirePackage{filemod-expmin}
\fi
\newif\ifsa@buildsuccess
%    \end{macrocode}
%
% \begin{macro}{\includestandalone@}[3]{<options>}{<filename>.<graphic ext>}{<filename>}
%% 0 = PDF if exists, TEX otherwise
%% 1 = force TEX
%% 2 = force PDF
%% 3 = build PDF if not exists
%% 4 = build PDF if older than TEX
%    \begin{macrocode}
\def\includestandalone@#1#2#3{%
    \ifcase\sa@mode
    \relax% 0
        \IfFileExists{#2}%
            {\includegraphics[#1]{#2}}%
            {\includegraphics[#1]{#3.tex}}%
    \or% 1
        \includegraphics[#1]{#3.tex}%
    \or% 2
        \includegraphics[#1]{#2}%
    \or% 3
        \sa@buildgraphic{#3}%
        \ifsa@buildsuccess
            \includegraphics[#1]{#2}%
        \else
            \PackageWarning{standalone}%
                {Graphic '#2' could not be build.^^J%
                Shell escape activated?}%
                \includegraphics[#1]{#3.tex}%
        \fi
    \or% 4
        \IfFileExists{#2}%
            {\includegraphics[#1]{#2}}%
            {\sa@buildgraphic{#3}%
             \ifsa@buildsuccess
                \includegraphics[#1]{#2}%
             \else
                \PackageWarning{standalone}%
                 {Graphic '#2' could not be build.^^J%
                  Shell escape activated?}%
                 \includegraphics[#1]{#3.tex}%
             \fi
            }%
    \or% 5
        \filemodCmp{#3.tex}{#2}%
            {\sa@buildgraphic{#3}%
             \ifsa@buildsuccess
                \includegraphics[#1]{#2}%
             \else
                \PackageWarning{standalone}%
                 {Graphic '#2' could not be build.^^J%
                  Shell escape activated?}%
                 \includegraphics[#1]{#3.tex}%
             \fi
            }%
            {%
                \PackageInfo{standalone}%
                    {#3.tex file newer then #2}%
                \includegraphics[#1]{#2}%
            }%
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\sa@buildgraphic}
% Compiles the given external file.
% The state of the shell escape is checked.
%    \begin{macrocode}
\def\sa@buildgraphic#1{%
    \ifeof18
        \PackageError{standalone}{Shell escape needed to create graphic! Use the '-shell-escape' option.}{}%
    \else
        \begingroup
        \edef\file{#1}%
        \edef\outfile{\file\sa@graphicext}%
        \edef\filemodbefore{\csname pdffilemoddate\endcsname{\outfile}}%
        \let\latex\sa@build@latex
        \let\latexoptions\sa@build@latexoptions
        \let\buildjobname\sa@build@jobname
        \sa@setquote
        \let\quote\sa@build@quote
        \immediate\write18{\sa@build@command}%
        \ifx\sa@build@postcommand\@empty\else
            \immediate\write18{\sa@build@postcommand}%
        \fi
        \IfFileExists{\outfile}{%
            \edef\filemodafter{\csname pdffilemoddate\endcsname{\outfile}}%
            \ifx\filemodbefore\filemodafter
                \expandafter\ifx\csname pdffilemoddate\endcsname\relax
                    \global\sa@buildsuccesstrue
                \else
                    \global\sa@buildsuccessfalse
                \fi
            \else
                \global\sa@buildsuccesstrue
            \fi
        }{%
            \global\sa@buildsuccessfalse
        }%
        \endgroup
    \fi
}
%    \end{macrocode}
% \end{macro}
%
% \iffalse
% \fi
%
